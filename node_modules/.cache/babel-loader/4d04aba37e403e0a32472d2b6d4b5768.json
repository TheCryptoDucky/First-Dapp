{"ast":null,"code":"var e, i, t, _, a, n, o;\n\n!function (e) {\n  e.MissingApiKey = \"MISSING_API_KEY\", e.ModalNotReady = \"MODAL_NOT_READY\", e.MalformedResponse = \"MALFORMED_RESPONSE\", e.InvalidArgument = \"INVALID_ARGUMENT\", e.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", e.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\";\n}(e || (e = {})), function (e) {\n  e.SyncWeb3Method = \"SYNC_WEB3_METHOD\", e.DuplicateIframe = \"DUPLICATE_IFRAME\", e.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", e.DeprecationNotice = \"DEPRECATION_NOTICE\";\n}(i || (i = {})), function (e) {\n  e[e.ParseError = -32700] = \"ParseError\", e[e.InvalidRequest = -32600] = \"InvalidRequest\", e[e.MethodNotFound = -32601] = \"MethodNotFound\", e[e.InvalidParams = -32602] = \"InvalidParams\", e[e.InternalError = -32603] = \"InternalError\", e[e.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", e[e.MagicLinkExpired = -10001] = \"MagicLinkExpired\", e[e.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", e[e.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", e[e.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", e[e.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", e[e.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", e[e.InactiveRecipient = -10010] = \"InactiveRecipient\", e[e.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\";\n}(t || (t = {})), function (e) {\n  e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_auth_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\";\n}(_ || (_ = {})), function (e) {\n  e.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", e.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", e.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", e.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", e.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\";\n}(a || (a = {})), function (e) {\n  e.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\";\n}(n || (n = {})), function (e) {\n  e.Harmony = \"HARMONY\";\n}(o || (o = {}));\nexport { o as EthChainType, a as MagicIncomingWindowMessage, n as MagicOutgoingWindowMessage, _ as MagicPayloadMethod, t as RPCErrorCode, e as SDKErrorCode, i as SDKWarningCode };","map":{"version":3,"sources":["../../src/core/exception-types.ts","../../src/core/json-rpc-types.ts","../../src/core/message-types.ts","../../src/modules/rpc-provider-types.ts"],"names":["SDKErrorCode","SDKWarningCode","RPCErrorCode","MagicPayloadMethod","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","EthChainType"],"mappings":"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","sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export type EthNetworkName = 'mainnet' | 'rinkeby' | 'ropsten' | 'kovan';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"]},"metadata":{},"sourceType":"module"}