{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy, providerFromEngine } from '@toruslabs/base-controllers';\nimport { WalletInitializationError } from '@web3auth/base';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { JRPCEngine, createScaffoldMiddleware, createAsyncMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass BaseProvider extends BaseController {\n  // should be Assigned in setupProvider\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"_providerEngineProxy\", null);\n\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: {\n        [config.chainConfig.chainId]: config.chainConfig\n      }\n    };\n    super.initialize();\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(chainConfig) {\n    if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: _objectSpread(_objectSpread({}, this.config.networks), {}, {\n        [chainConfig.chainId]: chainConfig\n      })\n    });\n  }\n\n  getChainConfig(chainId) {\n    var _this$config$networks;\n\n    const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n    if (!chainConfig) throw ethErrors.rpc.invalidRequest(\"Chain \".concat(chainId, \" is not supported, please add chainConfig for it\"));\n    return chainConfig;\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n}\n\nclass CommonPrivateKeyProvider {\n  constructor() {\n    _defineProperty(this, \"_providerEngineProxy\", null);\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async setupProvider(privKey) {\n    const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n    const engine = new JRPCEngine();\n    engine.push(privKeyMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n  getPrivKeyMiddleware(privKey) {\n    const middleware = {\n      getPrivatekey: async () => {\n        return privKey;\n      }\n    };\n    return this.createPrivKeyMiddleware(middleware);\n  }\n\n  createPrivKeyMiddleware(_ref) {\n    let {\n      getPrivatekey\n    } = _ref;\n\n    async function getPrivatekeyHandler(_, res) {\n      res.result = await getPrivatekey();\n    }\n\n    return createScaffoldMiddleware({\n      private_key: createAsyncMiddleware(getPrivatekeyHandler)\n    });\n  }\n\n}\n\n_defineProperty(CommonPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new CommonPrivateKeyProvider();\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nconst createRandomId = getCreateRandomId();\nexport { BaseProvider, CommonPrivateKeyProvider, createRandomId };","map":{"version":3,"sources":["../src/baseProvider.ts","../src/commonPrivateKeyProvider.ts","../src/utils.ts"],"names":["constructor","state","config","WalletInitializationError","chainId","chainConfig","networks","provider","addChain","ethErrors","getChainConfig","getProviderEngineProxy","updateProviderEngineProxy","createEventEmitterProxy","CommonPrivateKeyProvider","providerFactory","params","setupProvider","privKeyMiddleware","engine","providerFromEngine","switchChain","Promise","getPrivKeyMiddleware","middleware","getPrivatekey","createPrivKeyMiddleware","res","createScaffoldMiddleware","private_key","createAsyncMiddleware","createRandomId","getCreateRandomId"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseController, createEventEmitterProxy, providerFromEngine } from '@toruslabs/base-controllers';\nimport { WalletInitializationError } from '@web3auth/base';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { JRPCEngine, createScaffoldMiddleware, createAsyncMiddleware } from '@toruslabs/openlogin-jrpc';\nimport getCreateRandomId from 'json-rpc-random-id';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass BaseProvider extends BaseController {\n  // should be Assigned in setupProvider\n  constructor(_ref) {\n    let {\n      config,\n      state\n    } = _ref;\n    super({\n      config,\n      state\n    });\n\n    _defineProperty(this, \"_providerEngineProxy\", null);\n\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\"\n    };\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: {\n        [config.chainConfig.chainId]: config.chainConfig\n      }\n    };\n    super.initialize();\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(chainConfig) {\n    if (!chainConfig.chainId) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw ethErrors.rpc.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: _objectSpread(_objectSpread({}, this.config.networks), {}, {\n        [chainConfig.chainId]: chainConfig\n      })\n    });\n  }\n\n  getChainConfig(chainId) {\n    var _this$config$networks;\n\n    const chainConfig = (_this$config$networks = this.config.networks) === null || _this$config$networks === void 0 ? void 0 : _this$config$networks[chainId];\n    if (!chainConfig) throw ethErrors.rpc.invalidRequest(\"Chain \".concat(chainId, \" is not supported, please add chainConfig for it\"));\n    return chainConfig;\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n}\n\nclass CommonPrivateKeyProvider {\n  constructor() {\n    _defineProperty(this, \"_providerEngineProxy\", null);\n  }\n\n  get provider() {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  addChain(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async setupProvider(privKey) {\n    const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n    const engine = new JRPCEngine();\n    engine.push(privKeyMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  async switchChain(_) {\n    return Promise.resolve();\n  }\n\n  getProviderEngineProxy() {\n    return this._providerEngineProxy;\n  }\n\n  updateProviderEngineProxy(providerEngineProxy) {\n    if (this._providerEngineProxy) {\n      this._providerEngineProxy.setTarget(providerEngineProxy);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy(providerEngineProxy);\n    }\n  }\n\n  getPrivKeyMiddleware(privKey) {\n    const middleware = {\n      getPrivatekey: async () => {\n        return privKey;\n      }\n    };\n    return this.createPrivKeyMiddleware(middleware);\n  }\n\n  createPrivKeyMiddleware(_ref) {\n    let {\n      getPrivatekey\n    } = _ref;\n\n    async function getPrivatekeyHandler(_, res) {\n      res.result = await getPrivatekey();\n    }\n\n    return createScaffoldMiddleware({\n      private_key: createAsyncMiddleware(getPrivatekeyHandler)\n    });\n  }\n\n}\n\n_defineProperty(CommonPrivateKeyProvider, \"getProviderInstance\", async params => {\n  const providerFactory = new CommonPrivateKeyProvider();\n  await providerFactory.setupProvider(params.privKey);\n  return providerFactory;\n});\n\nconst createRandomId = getCreateRandomId();\n\nexport { BaseProvider, CommonPrivateKeyProvider, createRandomId };\n//# sourceMappingURL=baseProvider.esm.js.map\n"]},"metadata":{},"sourceType":"module"}