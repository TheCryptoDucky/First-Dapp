{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\n\n\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\n\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed(options) {\n  if (!options.support3PC) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","TRANSACTION_SETTINGS","averageResponseTime","canBeUsed","cleanOldMessages","close","commitIndexedDBTransaction","create","createDatabase","getAllMessages","getIdb","getMessagesHigherThan","getOldMessages","microSeconds","onMessage","postMessage","removeMessagesById","type","writeMessage","_util","require","_obliviousSet","_options","DB_PREFIX","OBJECT_STORE_ID","durability","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","tx","commit","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","ret","openCursor","cursor","push","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","ids","all","map","deleteRequest","ttl","olderThen","msgObk","then","tooOld","msg","options","fillOptionsWithDefaults","state","closed","randomToken","eMIs","ObliviousSet","idb","writeBlockPromise","PROMISE_RESOLVED_VOID","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","sleep","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","channelState","randomInt","fn","support3PC","_default"],"sources":["C:/Users/crypt/Desktop/Sentiment Dapp/FirstDapp-Starter/node_modules/@toruslabs/solana-embed/node_modules/@toruslabs/broadcast-channel/dist/lib/methods/indexed-db.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TRANSACTION_SETTINGS = void 0;\nexports.averageResponseTime = averageResponseTime;\nexports.canBeUsed = canBeUsed;\nexports.cleanOldMessages = cleanOldMessages;\nexports.close = close;\nexports.commitIndexedDBTransaction = commitIndexedDBTransaction;\nexports.create = create;\nexports.createDatabase = createDatabase;\nexports[\"default\"] = void 0;\nexports.getAllMessages = getAllMessages;\nexports.getIdb = getIdb;\nexports.getMessagesHigherThan = getMessagesHigherThan;\nexports.getOldMessages = getOldMessages;\nexports.microSeconds = void 0;\nexports.onMessage = onMessage;\nexports.postMessage = postMessage;\nexports.removeMessagesById = removeMessagesById;\nexports.type = void 0;\nexports.writeMessage = writeMessage;\n\nvar _util = require(\"../util.js\");\n\nvar _obliviousSet = require(\"oblivious-set\");\n\nvar _options = require(\"../options\");\n\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nvar microSeconds = _util.microSeconds;\nexports.microSeconds = microSeconds;\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nvar TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexports.TRANSACTION_SETTINGS = TRANSACTION_SETTINGS;\nvar type = 'idb';\nexports.type = type;\n\nfunction getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\n\nfunction commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\n\nfunction createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\n\nfunction writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\n\nfunction getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\n\nfunction getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\n\nfunction cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\n\nfunction create(channelName, options) {\n  options = (0, _options.fillOptionsWithDefaults)(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: (0, _util.randomToken)(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new _obliviousSet.ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: _util.PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return (0, _util.sleep)(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return _util.PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return _util.PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return _util.PROMISE_RESOLVED_VOID;\n  });\n}\n\nfunction close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\n\nfunction postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if ((0, _util.randomInt)(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\n\nfunction onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\n\nfunction canBeUsed(options) {\n  if (!options.support3PC) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\n\nfunction averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\n\nvar _default = {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};\nexports[\"default\"] = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}