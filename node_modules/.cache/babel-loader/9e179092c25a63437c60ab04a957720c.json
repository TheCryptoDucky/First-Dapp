{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { setAPIKey, setEmbedHost, post } from '@toruslabs/http-helpers';\nimport stringify from 'json-stable-stringify';\nimport { ec as ec$1 } from 'elliptic';\nimport createKeccakHash from 'keccak';\nimport { encrypt, getPublic, decrypt } from '@toruslabs/eccrypto';\n\nfunction keccak256(a) {\n  return createKeccakHash(\"keccak256\").update(a).digest();\n}\n\nconst ec = new ec$1(\"secp256k1\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass MetadataStorageLayer {\n  // ms\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _defineProperty(this, \"metadataHost\", void 0);\n\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n\n  generateMetadataParams(message, privateKeyHex) {\n    var _ref, _sig$recoveryParam;\n\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(stringify(setData)));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from((_ref = sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2))) !== null && _ref !== void 0 ? _ref : \"00\", \"hex\").toString(\"base64\")\n    };\n  }\n\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\")\n    };\n  }\n\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/set\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/get\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n\n}\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\n\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\n\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\n\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\n\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\n\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16),\n    pub_key_Y: pubKey.getY().toString(16)\n  }, namespace);\n\n  if (!serializedData) {\n    return null;\n  }\n\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\n\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\n\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\n\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\n\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\n\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n\nexport { decryptData, MetadataStorageLayer as default, ec, encParamsBufToHex, encParamsHexToBuf, encryptAndSetData, encryptData, getAndDecryptData, getDeviceShare, getTorusShare, keccak256, setDeviceShare, setTorusShare };","map":{"version":3,"sources":["../src/utils.ts","../src/MetadataStorageLayer.ts","../src/webAuthnShareResolver.ts"],"names":["createKeccakHash","ec","constructor","metadataHost","serverTimeOffset","setAPIKey","setEmbedHost","generateMetadataParams","key","setData","data","timestamp","Math","Date","sig","keccak256","stringify","pub_key_X","pub_key_Y","set_data","signature","Buffer","toString","generatePubKeyParams","setMetadata","params","namespace","metadataResponse","post","useAPIKey","getMetadata","WEBAUTHN_TORUS_SHARE","WEBAUTHN_DEVICE_SHARE","iv","encParamsHex","ephemPublicKey","ciphertext","mac","encParams","serializedDec","JSON","serializedBuf","encrypt","getPublic","encParamsBufToHex","sData","encParamsHexToBuf","keyPair","decrypt","pubKey","serializedData","decryptData","encryptData","metadataParams","m","refKeyPair","privKey","x","webAuthnPubKey","y","getAndDecryptData","d","serializedSubspaceData","serializedSubspaceDataBuf","encSubspaceData","encSubspaceDataHex","encryptAndSetData","subspaceData"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { setAPIKey, setEmbedHost, post } from '@toruslabs/http-helpers';\nimport stringify from 'json-stable-stringify';\nimport { ec as ec$1 } from 'elliptic';\nimport createKeccakHash from 'keccak';\nimport { encrypt, getPublic, decrypt } from '@toruslabs/eccrypto';\n\nfunction keccak256(a) {\n  return createKeccakHash(\"keccak256\").update(a).digest();\n}\nconst ec = new ec$1(\"secp256k1\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nclass MetadataStorageLayer {\n  // ms\n  constructor() {\n    let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n    let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _defineProperty(this, \"metadataHost\", void 0);\n\n    _defineProperty(this, \"serverTimeOffset\", void 0);\n\n    this.metadataHost = metadataHost;\n    this.serverTimeOffset = serverTimeOffset;\n  }\n\n  static setAPIKey(apiKey) {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost) {\n    setEmbedHost(embedHost);\n  }\n\n  generateMetadataParams(message, privateKeyHex) {\n    var _ref, _sig$recoveryParam;\n\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    const setData = {\n      data: message,\n      timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n    };\n    const sig = key.sign(keccak256(stringify(setData)));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\"),\n      set_data: setData,\n      signature: Buffer.from((_ref = sig.r.toString(16, 64) + sig.s.toString(16, 64) + ((_sig$recoveryParam = sig.recoveryParam) === null || _sig$recoveryParam === void 0 ? void 0 : _sig$recoveryParam.toString(16).padStart(2, \"0\").slice(-2))) !== null && _ref !== void 0 ? _ref : \"00\", \"hex\").toString(\"base64\")\n    };\n  }\n\n  generatePubKeyParams(privateKeyHex) {\n    const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\"),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\")\n    };\n  }\n\n  async setMetadata(data, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n      namespace\n    }) : data;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/set\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n\n  async getMetadata(pubKey, namespace, options) {\n    const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n      namespace\n    }) : pubKey;\n    const metadataResponse = await post(\"\".concat(this.metadataHost, \"/get\"), params, options, {\n      useAPIKey: true\n    });\n    return metadataResponse.message;\n  }\n\n}\n\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n  return {\n    iv: Buffer.from(encParamsHex.iv, \"hex\"),\n    ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n    ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n    mac: Buffer.from(encParamsHex.mac, \"hex\")\n  };\n}\nfunction encParamsBufToHex(encParams) {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\")\n  };\n}\nasync function encryptData(privKeyHex, d) {\n  const serializedDec = JSON.stringify(d);\n  const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n  const encParams = await encrypt(getPublic(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n  const encParamsHex = encParamsBufToHex(encParams);\n  const sData = JSON.stringify(encParamsHex);\n  return sData;\n}\nasync function decryptData(privKeyHex, d) {\n  const encParamsHex = JSON.parse(d);\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const serializedBuf = await decrypt(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedDec = serializedBuf.toString(\"utf-8\");\n  const data = JSON.parse(serializedDec);\n  return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n  const keyPair = ec.keyFromPrivate(privKeyHex);\n  const pubKey = keyPair.getPublic();\n  const serializedData = await m.getMetadata({\n    pub_key_X: pubKey.getX().toString(16),\n    pub_key_Y: pubKey.getY().toString(16)\n  }, namespace);\n\n  if (!serializedData) {\n    return null;\n  }\n\n  const data = await decryptData(privKeyHex, serializedData);\n  return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n  const sData = await encryptData(privKeyHex, d);\n  const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n  await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n  const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = refKeyPair.getPrivate();\n  const pubKey = ec.keyFromPublic({\n    x: webAuthnPubKey.pub_key_X,\n    y: webAuthnPubKey.pub_key_Y\n  });\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  let d = {};\n  if (data) d = data;\n  const serializedSubspaceData = JSON.stringify(subspaceData);\n  const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n  const encSubspaceData = await encrypt(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n  const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n  d[subspace] = encSubspaceDataHex;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n  const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n  const privKey = keyPair.getPrivate();\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  let d = {};\n  if (data) d = data;\n  d[subspace] = subspaceData;\n  await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n  if (!data) return null;\n  const encParamsHex = data[subspace];\n  if (!encParamsHex) return null;\n  const encParams = encParamsHexToBuf(encParamsHex);\n  const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n  const privKey = keyPair.getPrivate();\n  const serializedSubspaceDataBuf = await decrypt(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n  const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n  const subspaceData = JSON.parse(serializedSubspaceData);\n  return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n  const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n  if (data) return data[subspace];\n  return null;\n}\n\nexport { decryptData, MetadataStorageLayer as default, ec, encParamsBufToHex, encParamsHexToBuf, encryptAndSetData, encryptData, getAndDecryptData, getDeviceShare, getTorusShare, keccak256, setDeviceShare, setTorusShare };\n//# sourceMappingURL=metadataHelpers.esm.js.map\n"]},"metadata":{},"sourceType":"module"}