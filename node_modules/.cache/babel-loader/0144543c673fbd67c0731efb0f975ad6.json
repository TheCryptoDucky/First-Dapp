{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };","map":{"version":3,"sources":["../src/metamaskAdapter.ts"],"names":["ADAPTER_NAMESPACES","EIP155","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","WALLET_ADAPTERS","METAMASK","ADAPTER_STATUS","NOT_READY","constructor","adapterOptions","provider","init","detectEthereumProvider","mustBeMetaMask","WalletInitializationError","ADAPTER_EVENTS","log","options","setAdapterSettings","connect","getChainConfig","adapter","WalletLoginError","method","chainId","reconnected","rehydrated","disconnect","cleanup","getUserInfo","switchChain","params","chainConfig","switchError","chainName","rpcUrls"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, log, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      log.debug(\"initializing metamask adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}