{"ast":null,"code":"import { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, log, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthCore } from '@web3auth/core';\nimport LoginModal, { getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultOtherModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(\"Invalid chainNamespace: \".concat(customChainConfig.chainNamespace));\n\n  const finalChainConfig = _objectSpread$1(_objectSpread$1({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);\n    const adapter = new OpenloginAdapter(_objectSpread$1(_objectSpread$1({}, defaultOptions), {}, {\n      chainConfig: _objectSpread$1(_objectSpread$1({}, defaultOptions.chainConfig || {}), finalChainConfig),\n      adapterSettings: _objectSpread$1(_objectSpread$1({}, defaultOptions.adapterSettings), {}, {\n        clientId\n      })\n    }));\n    return adapter;\n  }\n\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass Web3Auth extends Web3AuthCore {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2;\n\n    super(options);\n\n    _defineProperty(this, \"loginModal\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(\"Invalid chainNamespace provided: \".concat(providedChainConfig.chainNamespace));\n    }\n\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,\n      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || \"\",\n      version: \"\",\n      adapterListener: this,\n      displayErrorsOnModal: this.options.displayErrorsOnModal\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig; // merge default adapters with the custom configured adapters.\n\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3; // start with the default config of adapter.\n\n\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      }; // override the default config of adapter if some config is being provided by the user.\n\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n\n      this.modalConfig.adapters[adapterName] = adapterConfig; // check if adapter is configured/added by user and exist in walletAdapters map.\n\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter); // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return; // add client id to openlogin adapter, same web3auth client id can be used in openlogin.\n        // this id is being overridden if user is also passing client id in openlogin's adapter constructor.\n\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          this.walletAdapters[adapterName].setAdapterSettings({\n            clientId: this.options.clientId\n          });\n        } // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n\n\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n\n          this.walletAdapters[adapterName].setChainConfig(chainConfig);\n        }\n\n        return adapterName;\n      }\n    });\n    const adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      var _this$modalConfig$ada5;\n\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters[adapter.name].showOnModal !== true) return false;\n      if (!this.modalConfig.adapters[adapter.name].loginMethods) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(adapter.name, this.walletAdapters[adapter.name], (_this$modalConfig$ada5 = this.modalConfig.adapters[adapter.name]) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5.loginMethods);\n      if (Object.values(mergedLoginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, \"hasInAppWallets\"); // Now, initialize the adapters.\n\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n\n      try {\n        const adapter = this.walletAdapters[adapterName]; // only initialize a external adapter here if it is a cached adapter.\n\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        } // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n\n\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }); // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada6;\n\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada6 = this.modalConfig.adapters) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6[adapterName].showOnModal);\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    } // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n\n\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    const adaptersData = {};\n    const adapterPromises = Object.keys(this.walletAdapters).map(async adapterName => {\n      try {\n        const adapter = this.walletAdapters[adapterName];\n\n        if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n          log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n          this.subscribeToAdapterEvents(adapter); // we are not initializing cached adapter here as it is already being initialized in initModal before.\n\n          if (this.cachedAdapter === adapterName) {\n            return;\n          }\n\n          if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n            autoConnect: this.cachedAdapter === adapterName\n          });\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          adaptersData[adapterName] = adapter.adapterData || {};\n          return adapterName;\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    const adapterInitResults = await Promise.all(adapterPromises);\n    const finalAdaptersConfig = {};\n    adapterInitResults.forEach(result => {\n      if (result) {\n        finalAdaptersConfig[result] = adaptersConfig[result];\n      }\n    });\n    this.loginModal.addWalletLogins(finalAdaptersConfig, {\n      showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n    });\n  }\n\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada7, _this$options$uiConfi3;\n\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada7 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada7 === void 0 ? void 0 : _this$modalConfig$ada7.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);\n    }\n  }\n\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(\"Error while connecting to adapter: \".concat(params.adapter), error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(\"Error while disconnecting\", error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      var _this$walletAdapters$2;\n\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;\n\n      if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {\n        // refreshing session for wallet connect whenever modal is opened.\n        try {\n          this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();\n        } catch (error) {\n          log.error(\"Error while disconnecting to wallet connect in core\", error);\n        }\n      }\n    });\n  }\n\n}\n\nexport { Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultOtherModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };","map":{"version":3,"sources":["../src/config.ts","../src/default.ts","../src/modalManager.ts"],"names":["defaultSolanaDappModalConfig","chainNamespace","CHAIN_NAMESPACES","adapters","SOLANA_ADAPTERS","label","showOnModal","showOnMobile","showOnDesktop","defaultEvmDappModalConfig","EVM_ADAPTERS","defaultSolanaWalletModalConfig","defaultEvmWalletModalConfig","defaultOtherModalConfig","getDefaultAdapterModule","clientId","Object","customChainConfig","finalChainConfig","getChainConfig","name","WALLET_ADAPTERS","TorusWalletAdapter","adapter","chainConfig","SolanaWalletAdapter","MetamaskAdapter","PhantomAdapter","WalletConnectV1Adapter","getOpenloginDefaultOptions","defaultOptions","adapterSettings","constructor","providedChainConfig","options","theme","appLogo","version","adapterListener","displayErrorsOnModal","initModal","allAdapters","adapterConfigurationPromises","adapterConfig","modalConfig","params","log","adapterName","ad","ADAPTER_CATEGORY","adapterNames","Promise","hasInAppWallets","mergedLoginMethods","getAdapterSocialLogins","loginMethods","method","initPromises","ADAPTER_STATUS","autoConnect","hasExternalWallets","showExternalWalletsOnly","connect","ADAPTER_EVENTS","resolve","err","reject","initExternalWalletAdapters","adaptersConfig","adaptersData","adapterPromises","adapterInitResults","finalAdaptersConfig","result","initializeInAppWallet","loginMethodsOrder","subscribeToLoginModalEvents","LOGIN_MODAL_EVENTS","walletConnectStatus","visibility"],"mappings":"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","sourcesContent":["import { CHAIN_NAMESPACES, SOLANA_ADAPTERS, EVM_ADAPTERS, getChainConfig, WALLET_ADAPTERS, log, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Web3AuthCore } from '@web3auth/core';\nimport LoginModal, { getAdapterSocialLogins, OPENLOGIN_PROVIDERS, LOGIN_MODAL_EVENTS } from '@web3auth/ui';\n\nconst defaultSolanaDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.TORUS_SOLANA]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [SOLANA_ADAPTERS.PHANTOM]: {\n      label: \"Phantom\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmDappModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.TORUS_EVM]: {\n      label: \"Torus Wallet\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.METAMASK]: {\n      label: \"MetaMask\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    },\n    [EVM_ADAPTERS.WALLET_CONNECT_V1]: {\n      label: \"Wallet Connect\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultSolanaWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.SOLANA,\n  adapters: {\n    [SOLANA_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultEvmWalletModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\nconst defaultOtherModalConfig = {\n  chainNamespace: CHAIN_NAMESPACES.OTHER,\n  adapters: {\n    [EVM_ADAPTERS.OPENLOGIN]: {\n      label: \"OpenLogin\",\n      showOnModal: true,\n      showOnMobile: true,\n      showOnDesktop: true\n    }\n  }\n};\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nconst getDefaultAdapterModule = async params => {\n  const {\n    name,\n    customChainConfig,\n    clientId\n  } = params;\n  if (!Object.values(CHAIN_NAMESPACES).includes(customChainConfig.chainNamespace)) throw new Error(\"Invalid chainNamespace: \".concat(customChainConfig.chainNamespace));\n\n  const finalChainConfig = _objectSpread$1(_objectSpread$1({}, getChainConfig(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId)), customChainConfig || {});\n\n  if (name === WALLET_ADAPTERS.TORUS_EVM) {\n    const {\n      TorusWalletAdapter\n    } = await import('@web3auth/torus-evm-adapter');\n    const adapter = new TorusWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.TORUS_SOLANA) {\n    const {\n      SolanaWalletAdapter\n    } = await import('@web3auth/torus-solana-adapter');\n    const adapter = new SolanaWalletAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.METAMASK) {\n    const {\n      MetamaskAdapter\n    } = await import('@web3auth/metamask-adapter');\n    const adapter = new MetamaskAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.PHANTOM) {\n    const {\n      PhantomAdapter\n    } = await import('@web3auth/phantom-adapter');\n    const adapter = new PhantomAdapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.WALLET_CONNECT_V1) {\n    const {\n      WalletConnectV1Adapter\n    } = await import('@web3auth/wallet-connect-v1-adapter');\n    const adapter = new WalletConnectV1Adapter({\n      chainConfig: finalChainConfig\n    });\n    return adapter;\n  } else if (name === WALLET_ADAPTERS.OPENLOGIN) {\n    const {\n      OpenloginAdapter,\n      getOpenloginDefaultOptions\n    } = await import('@web3auth/openlogin-adapter');\n    const defaultOptions = getOpenloginDefaultOptions(customChainConfig.chainNamespace, customChainConfig === null || customChainConfig === void 0 ? void 0 : customChainConfig.chainId);\n    const adapter = new OpenloginAdapter(_objectSpread$1(_objectSpread$1({}, defaultOptions), {}, {\n      chainConfig: _objectSpread$1(_objectSpread$1({}, defaultOptions.chainConfig || {}), finalChainConfig),\n      adapterSettings: _objectSpread$1(_objectSpread$1({}, defaultOptions.adapterSettings), {}, {\n        clientId\n      })\n    }));\n    return adapter;\n  }\n\n  throw new Error(\"Invalid wallet adapter name\");\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass Web3Auth extends Web3AuthCore {\n  constructor(options) {\n    var _this$options$uiConfi, _this$options$uiConfi2;\n\n    super(options);\n\n    _defineProperty(this, \"loginModal\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"modalConfig\", defaultEvmDappModalConfig);\n\n    this.options = _objectSpread({}, options);\n    const providedChainConfig = this.options.chainConfig;\n\n    if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      if (options.authMode === \"WALLET\") {\n        // default config for solana wallet modal\n        this.modalConfig = defaultSolanaWalletModalConfig;\n      } else {\n        // default config for solana dapp modal\n        this.modalConfig = defaultSolanaDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.EIP155) {\n      if (options.authMode === \"WALLET\") {\n        // default config for evm wallet modal\n        this.modalConfig = defaultEvmWalletModalConfig;\n      } else {\n        // default config for evm dapp modal\n        this.modalConfig = defaultEvmDappModalConfig;\n      }\n    } else if (providedChainConfig.chainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.modalConfig = defaultOtherModalConfig;\n    } else {\n      throw new Error(\"Invalid chainNamespace provided: \".concat(providedChainConfig.chainNamespace));\n    }\n\n    this.loginModal = new LoginModal({\n      theme: (_this$options$uiConfi = this.options.uiConfig) === null || _this$options$uiConfi === void 0 ? void 0 : _this$options$uiConfi.theme,\n      appLogo: ((_this$options$uiConfi2 = this.options.uiConfig) === null || _this$options$uiConfi2 === void 0 ? void 0 : _this$options$uiConfi2.appLogo) || \"\",\n      version: \"\",\n      adapterListener: this,\n      displayErrorsOnModal: this.options.displayErrorsOnModal\n    });\n    this.subscribeToLoginModalEvents();\n  }\n\n  async initModal(params) {\n    super.checkInitRequirements();\n    await this.loginModal.initModal();\n    const providedChainConfig = this.options.chainConfig; // merge default adapters with the custom configured adapters.\n\n    const allAdapters = [...new Set([...Object.keys(this.modalConfig.adapters || {}), ...Object.keys(this.walletAdapters)])];\n    const adapterConfigurationPromises = allAdapters.map(async adapterName => {\n      var _this$modalConfig$ada, _params$modalConfig, _this$modalConfig$ada2, _this$modalConfig$ada3;\n\n      // start with the default config of adapter.\n      let adapterConfig = ((_this$modalConfig$ada = this.modalConfig.adapters) === null || _this$modalConfig$ada === void 0 ? void 0 : _this$modalConfig$ada[adapterName]) || {\n        label: adapterName,\n        showOnModal: true,\n        showOnMobile: true,\n        showOnDesktop: true\n      }; // override the default config of adapter if some config is being provided by the user.\n\n      if (params !== null && params !== void 0 && (_params$modalConfig = params.modalConfig) !== null && _params$modalConfig !== void 0 && _params$modalConfig[adapterName]) {\n        adapterConfig = _objectSpread(_objectSpread({}, adapterConfig), params.modalConfig[adapterName]);\n      }\n\n      this.modalConfig.adapters[adapterName] = adapterConfig; // check if adapter is configured/added by user and exist in walletAdapters map.\n\n      const adapter = this.walletAdapters[adapterName];\n      log.debug(\"adapter config\", adapterName, (_this$modalConfig$ada2 = this.modalConfig.adapters) === null || _this$modalConfig$ada2 === void 0 ? void 0 : _this$modalConfig$ada2[adapterName].showOnModal, adapter); // if adapter is not custom configured then check if it is available in default adapters.\n      // and if adapter is not hidden by user\n\n      if (!adapter && (_this$modalConfig$ada3 = this.modalConfig.adapters) !== null && _this$modalConfig$ada3 !== void 0 && _this$modalConfig$ada3[adapterName].showOnModal) {\n        // if adapter is not configured and some default configuration is available, use it.\n        const ad = await getDefaultAdapterModule({\n          name: adapterName,\n          customChainConfig: this.options.chainConfig,\n          clientId: this.options.clientId\n        });\n        this.walletAdapters[adapterName] = ad;\n        return adapterName;\n      } else if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.IN_APP || (adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL || adapterName === this.cachedAdapter) {\n        var _this$modalConfig$ada4;\n\n        if (!((_this$modalConfig$ada4 = this.modalConfig.adapters) !== null && _this$modalConfig$ada4 !== void 0 && _this$modalConfig$ada4[adapterName].showOnModal)) return; // add client id to openlogin adapter, same web3auth client id can be used in openlogin.\n        // this id is being overridden if user is also passing client id in openlogin's adapter constructor.\n\n        if (adapterName === WALLET_ADAPTERS.OPENLOGIN) {\n          this.walletAdapters[adapterName].setAdapterSettings({\n            clientId: this.options.clientId\n          });\n        } // if adapter doesn't have any chainConfig then we will set the chainConfig based of passed chainNamespace\n        // and chainNamespace.\n\n\n        if (!adapter.chainConfigProxy) {\n          var _this$coreOptions$cha;\n\n          const chainConfig = _objectSpread(_objectSpread({}, getChainConfig(providedChainConfig.chainNamespace, (_this$coreOptions$cha = this.coreOptions.chainConfig) === null || _this$coreOptions$cha === void 0 ? void 0 : _this$coreOptions$cha.chainId)), this.coreOptions.chainConfig);\n\n          this.walletAdapters[adapterName].setChainConfig(chainConfig);\n        }\n\n        return adapterName;\n      }\n    });\n    const adapterNames = await Promise.all(adapterConfigurationPromises);\n    const hasInAppWallets = Object.values(this.walletAdapters).some(adapter => {\n      var _this$modalConfig$ada5;\n\n      if (adapter.type !== ADAPTER_CATEGORY.IN_APP) return false;\n      if (this.modalConfig.adapters[adapter.name].showOnModal !== true) return false;\n      if (!this.modalConfig.adapters[adapter.name].loginMethods) return true;\n      const mergedLoginMethods = getAdapterSocialLogins(adapter.name, this.walletAdapters[adapter.name], (_this$modalConfig$ada5 = this.modalConfig.adapters[adapter.name]) === null || _this$modalConfig$ada5 === void 0 ? void 0 : _this$modalConfig$ada5.loginMethods);\n      if (Object.values(mergedLoginMethods).some(method => method.showOnModal)) return true;\n      return false;\n    });\n    log.debug(hasInAppWallets, this.walletAdapters, \"hasInAppWallets\"); // Now, initialize the adapters.\n\n    const initPromises = adapterNames.map(async adapterName => {\n      if (!adapterName) return;\n\n      try {\n        const adapter = this.walletAdapters[adapterName]; // only initialize a external adapter here if it is a cached adapter.\n\n        if (this.cachedAdapter !== adapterName && adapter.type === ADAPTER_CATEGORY.EXTERNAL) {\n          return;\n        } // in-app wallets or cached wallet (being connected or already connected) are initialized first.\n        // if adapter is configured thn only initialize in app or cached adapter.\n        // external wallets are initialized on INIT_EXTERNAL_WALLET event.\n\n\n        this.subscribeToAdapterEvents(adapter);\n        if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n          autoConnect: this.cachedAdapter === adapterName\n        }); // note: not adding cachedWallet to modal if it is external wallet.\n        // adding it later if no in-app wallets are available.\n\n        if (adapter.type === ADAPTER_CATEGORY.IN_APP) {\n          this.initializeInAppWallet(adapterName);\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    await Promise.all(initPromises);\n    const hasExternalWallets = allAdapters.some(adapterName => {\n      var _this$walletAdapters$, _this$modalConfig$ada6;\n\n      return ((_this$walletAdapters$ = this.walletAdapters[adapterName]) === null || _this$walletAdapters$ === void 0 ? void 0 : _this$walletAdapters$.type) === ADAPTER_CATEGORY.EXTERNAL && ((_this$modalConfig$ada6 = this.modalConfig.adapters) === null || _this$modalConfig$ada6 === void 0 ? void 0 : _this$modalConfig$ada6[adapterName].showOnModal);\n    });\n\n    if (hasExternalWallets) {\n      this.loginModal.initExternalWalletContainer();\n    } // variable to check if we have any in app wallets\n    // currently all default in app and external wallets can be hidden or shown based on config.\n\n\n    if (!hasInAppWallets && hasExternalWallets) {\n      // if no in app wallet is available then initialize external wallets in modal\n      await this.initExternalWalletAdapters(false, {\n        showExternalWalletsOnly: true\n      });\n    }\n  }\n\n  async connect() {\n    // if (!this.loginModal.initialized) throw new Error(\"Login modal is not initialized\");\n    // if already connected return provider\n    if (this.provider) return this.provider;\n    this.loginModal.open();\n    return new Promise((resolve, reject) => {\n      this.once(ADAPTER_EVENTS.CONNECTED, () => {\n        return resolve(this.provider);\n      });\n      this.once(ADAPTER_EVENTS.ERRORED, err => {\n        return reject(err);\n      });\n    });\n  }\n\n  async initExternalWalletAdapters(externalWalletsInitialized, options) {\n    if (externalWalletsInitialized) return;\n    const adaptersConfig = {};\n    const adaptersData = {};\n    const adapterPromises = Object.keys(this.walletAdapters).map(async adapterName => {\n      try {\n        const adapter = this.walletAdapters[adapterName];\n\n        if ((adapter === null || adapter === void 0 ? void 0 : adapter.type) === ADAPTER_CATEGORY.EXTERNAL) {\n          log.debug(\"init external wallet\", this.cachedAdapter, adapterName);\n          this.subscribeToAdapterEvents(adapter); // we are not initializing cached adapter here as it is already being initialized in initModal before.\n\n          if (this.cachedAdapter === adapterName) {\n            return;\n          }\n\n          if (adapter.status === ADAPTER_STATUS.NOT_READY) await adapter.init({\n            autoConnect: this.cachedAdapter === adapterName\n          });\n          adaptersConfig[adapterName] = this.modalConfig.adapters[adapterName];\n          adaptersData[adapterName] = adapter.adapterData || {};\n          return adapterName;\n        }\n      } catch (error) {\n        log.error(error, \"error while initializing adapter\");\n      }\n    });\n    const adapterInitResults = await Promise.all(adapterPromises);\n    const finalAdaptersConfig = {};\n    adapterInitResults.forEach(result => {\n      if (result) {\n        finalAdaptersConfig[result] = adaptersConfig[result];\n      }\n    });\n    this.loginModal.addWalletLogins(finalAdaptersConfig, {\n      showExternalWalletsOnly: !!(options !== null && options !== void 0 && options.showExternalWalletsOnly)\n    });\n  }\n\n  initializeInAppWallet(adapterName) {\n    log.info(\"adapterInitResults\", adapterName);\n\n    if (this.walletAdapters[adapterName].type === ADAPTER_CATEGORY.IN_APP) {\n      var _this$modalConfig$ada7, _this$options$uiConfi3;\n\n      this.loginModal.addSocialLogins(adapterName, getAdapterSocialLogins(adapterName, this.walletAdapters[adapterName], (_this$modalConfig$ada7 = this.modalConfig.adapters[adapterName]) === null || _this$modalConfig$ada7 === void 0 ? void 0 : _this$modalConfig$ada7.loginMethods), ((_this$options$uiConfi3 = this.options.uiConfig) === null || _this$options$uiConfi3 === void 0 ? void 0 : _this$options$uiConfi3.loginMethodsOrder) || OPENLOGIN_PROVIDERS);\n    }\n  }\n\n  subscribeToLoginModalEvents() {\n    this.loginModal.on(LOGIN_MODAL_EVENTS.LOGIN, async params => {\n      try {\n        await this.connectTo(params.adapter, params.loginParams);\n      } catch (error) {\n        log.error(\"Error while connecting to adapter: \".concat(params.adapter), error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.INIT_EXTERNAL_WALLETS, async params => {\n      await this.initExternalWalletAdapters(params.externalWalletsInitialized);\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.DISCONNECT, async () => {\n      try {\n        await this.logout();\n      } catch (error) {\n        log.error(\"Error while disconnecting\", error);\n      }\n    });\n    this.loginModal.on(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, async visibility => {\n      var _this$walletAdapters$2;\n\n      log.debug(\"is login modal visible\", visibility);\n      this.emit(LOGIN_MODAL_EVENTS.MODAL_VISIBILITY, visibility);\n      const walletConnectStatus = (_this$walletAdapters$2 = this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1]) === null || _this$walletAdapters$2 === void 0 ? void 0 : _this$walletAdapters$2.status;\n\n      if (visibility && walletConnectStatus === ADAPTER_STATUS.READY) {\n        // refreshing session for wallet connect whenever modal is opened.\n        try {\n          this.walletAdapters[WALLET_ADAPTERS.WALLET_CONNECT_V1].connect();\n        } catch (error) {\n          log.error(\"Error while disconnecting to wallet connect in core\", error);\n        }\n      }\n    });\n  }\n\n}\n\nexport { Web3Auth, defaultEvmDappModalConfig, defaultEvmWalletModalConfig, defaultOtherModalConfig, defaultSolanaDappModalConfig, defaultSolanaWalletModalConfig };\n//# sourceMappingURL=web3auth.esm.js.map\n"]},"metadata":{},"sourceType":"module"}