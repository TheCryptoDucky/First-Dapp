{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };","map":{"version":3,"sources":["../src/solanaWalletAdapter.ts"],"names":["WALLET_ADAPTERS","TORUS_SOLANA","ADAPTER_NAMESPACES","SOLANA","CHAIN_NAMESPACES","ADAPTER_CATEGORY","EXTERNAL","ADAPTER_STATUS","NOT_READY","constructor","params","provider","solanaProvider","init","getChainConfig","chainId","network","blockExplorerUrl","logo","tickerName","log","showTorusButton","config","chainConfig","ADAPTER_EVENTS","options","connect","WalletInitializationError","adapter","torusInpageProvider","error","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings"],"mappings":"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","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport Torus from '@toruslabs/solana-embed';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, getChainConfig, log, ADAPTER_EVENTS, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { TorusInjectedProvider } from '@web3auth/solana-provider';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass SolanaWalletAdapter extends BaseAdapter {\n  constructor() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.TORUS_SOLANA);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"torusInstance\", null);\n\n    _defineProperty(this, \"torusWalletOptions\", void 0);\n\n    _defineProperty(this, \"initParams\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"solanaProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      var _this$solanaProvider;\n\n      return ((_this$solanaProvider = this.solanaProvider) === null || _this$solanaProvider === void 0 ? void 0 : _this$solanaProvider.provider) || null;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    let network;\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const {\n        blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        rpcTarget,\n        chainId\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        ticker,\n        tickerName,\n        logo: \"\"\n      };\n    } else {\n      const {\n        chainId,\n        blockExplorer,\n        displayName,\n        rpcTarget,\n        ticker,\n        tickerName\n      } = this.chainConfig;\n      network = {\n        chainId,\n        rpcTarget,\n        blockExplorerUrl: blockExplorer,\n        displayName,\n        tickerName,\n        ticker,\n        logo: \"\"\n      };\n    }\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init(_objectSpread(_objectSpread({\n      showTorusButton: false\n    }, this.initParams), {}, {\n      network\n    }));\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect() {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.TORUS_SOLANA\n    });\n\n    try {\n      await this.torusInstance.login(this.loginSettings);\n\n      try {\n        const torusInpageProvider = this.torusInstance.provider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const {\n            chainId,\n            blockExplorer,\n            displayName,\n            rpcTarget,\n            ticker,\n            tickerName\n          } = this.chainConfig;\n          const network = {\n            chainId,\n            rpcTarget,\n            blockExplorerUrl: blockExplorer,\n            displayName,\n            tickerName,\n            ticker,\n            logo: \"\"\n          };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.TORUS_SOLANA,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_) {}\n\n}\n\nexport { SolanaWalletAdapter };\n//# sourceMappingURL=torusSolanaAdapter.esm.js.map\n"]},"metadata":{},"sourceType":"module"}