{"ast":null,"code":"import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak'; // TODO: should be crypto safe\n\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = base64urlLib;\n\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\n\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nconst keccak = keccakLib;\n\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\n\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };","map":{"version":3,"sources":["../src/randomId.ts","../src/url.ts","../src/utils.ts"],"names":["randomId","randombytes","toString","base64url","keccak","JSON","input","str","Buffer","data"],"mappings":";;;gCAAA;;AAGaA,MAAAA,QAAQ,GAAG,MAAcC,WAAW,CAAXA,EAAW,CAAXA,CAAAA,QAAAA,CAAAA,KAAAA,CAAzBD;;ACDP,MAAA,iBAAA,SAAA,GAAA,CAAoC;EAAA,WAAA,GAAA;IAAA,MAAA,GAAA,SAAA;;IAAA,eACf,CAAA,IAAA,EAAA,YAAA,EAAA,IADe,eACf,EAAA,CADe;EAAA;;EAGxCE,QAAQ,GAAA;IACN,KAAA,IAAA,GAAY,KAAA,UAAA,CAAZ,QAAY,EAAZ;IACA,OAAO,MAAA,QAAA,CAAA,IAAA,CAAP,IAAO,CAAP;EACD;;AANuC;;ACCnC,MAAMC,SAAS,GAAf,YAAA;;AAED,SAAA,QAAA,CAAA,GAAA,EAA8B;EAClC,OAAOA,SAAS,CAATA,MAAAA,CAAP,GAAOA,CAAP;AACD;;AAEK,SAAA,QAAA,CAAA,GAAA,EAA8B;EAClC;EACA,OAAOA,SAAS,CAATA,MAAAA,CAAP,GAAOA,CAAP;AACD;;AAEM,MAAMC,MAAM,GAAZ,SAAA;;AAID,SAAA,YAAA,CAAA,MAAA,EAAqC;EACzC,OAAOC,IAAI,CAAJA,KAAAA,CAAWF,SAAS,CAATA,MAAAA,CAAlB,MAAkBA,CAAXE,CAAP;AACD;;AAEK,SAAA,YAAA,CAAA,IAAA,EAAoD;EACxD,OAAOF,SAAS,CAATA,MAAAA,CAAiBE,IAAI,CAAJA,SAAAA,CAAxB,IAAwBA,CAAjBF,CAAP;AACD;;AAEK,SAAA,SAAA,CAAA,GAAA,EAA+B;EACnC,IAAIG,KAAK,GAAT,GAAA;;EACA,IAAI,OAAA,GAAA,KAAA,QAAA,IAA2BC,GAAG,CAAHA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAA3B,IAAA,IAAuDA,GAAG,CAAHA,MAAAA,KAA3D,EAAA,EAA8E;IAC5ED,KAAK,GAAGE,MAAM,CAANA,IAAAA,CAAYD,GAAG,CAAHA,KAAAA,CAAZC,CAAYD,CAAZC,EAARF,KAAQE,CAARF;EACD;;EACD,MAAMG,IAAI,GAAA,KAAA,MAAA,CAAQL,MAAM,CAANA,WAAM,CAANA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAAA,KAAAA,EAAAA,QAAAA,CAAAA,EAAAA,EAAlB,GAAkBA,CAAR,CAAV;EACA,OAAA,IAAA;AACD","sourcesContent":["import randombytes from 'randombytes';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport base64urlLib from 'base64url';\nimport keccakLib from 'keccak';\n\n// TODO: should be crypto safe\nconst randomId = () => randombytes(32).toString(\"hex\");\n\nclass URLWithHashParams extends URL {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"hashParams\", new URLSearchParams());\n  }\n\n  toString() {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n\n}\n\nconst base64url = base64urlLib;\nfunction safebtoa(str) {\n  return base64url.encode(str);\n}\nfunction safeatob(str) {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\nconst keccak = keccakLib;\nfunction base64toJSON(b64str) {\n  return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n  return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n  let input = str;\n\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    input = Buffer.from(str.slice(2), \"hex\");\n  }\n\n  const data = \"0x\".concat(keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\"));\n  return data;\n}\n\nexport { URLWithHashParams, base64toJSON, base64url, jsonToBase64, keccak, keccak256, randomId, safeatob, safebtoa };\n//# sourceMappingURL=openloginUtils.esm.js.map\n"]},"metadata":{},"sourceType":"module"}